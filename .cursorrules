# Cursor Rules for Yazelix Project

## General Rules
- Make sure the user is happy and has to do as little work as possible
- Yazelix can be opinionated at times, but recently we have been trying to be more flexible and allow for more customization

## Terminal Command Rules
- When running terminal commands, use `nu -c` for nushell commands
- Use full paths like `/bin/mv` when PATH environment has issues
- Dont assume commands failed - check if they actually worked first
- Keep terminal commands simple and direct
- Always check the working directory before running commands
- **NEVER use the `exit` command to exit the shell** - this can disrupt the user's session and workflow
- **PATH Environment Issues - IMMEDIATE ACTION REQUIRED**: When encountering "command not found" errors in Nix environments:
  - **EXECUTE IMMEDIATELY**: Run `export PATH="/bin:/usr/bin:/usr/local/bin:$PATH"` as first response to any PATH issue
  - **VERIFY THE FIX**: Follow up with `echo "Updated PATH: $PATH" && which ls && which cat` to confirm
  - **SESSION PERSISTENCE**: The export command only lasts for the current shell session
  - **PERMANENT FIX**: Use the terminal profile configuration shown above for persistent solution
  - **ROOT CAUSE**: Common issue in Nix shells where basic system commands aren't in PATH
  - **FALLBACK**: If export doesn't work, use inline PATH: `PATH="/bin:/usr/bin:/usr/local/bin:$PATH" command`
  - **DO NOT**: Ask user for help - execute the PATH fix first, then proceed with original task

## Terminal Environment Debugging Rules
- **Shell Detection**: Always verify which shell is actually running with `echo $0` - prompts can be misleading
- **VSCode/Cursor Integration Issues**: Integrated terminals often launch system shells instead of Nix-provided ones
  - System Nushell (`/usr/bin/nu`) lacks Yazelix environment and tools like zoxide
  - WezTerm launches proper Yazelix environment, VSCode/Cursor may not
  - Test commands in both environments when debugging
  - **Working Solution**: Configure Cursor terminal profile with:
    ```json
    "nu": {
      "path": "/usr/bin/bash",
      "args": ["-c", "source ~/.nix-profile/etc/profile.d/nix.sh && cd ~/.config/yazelix && nix develop --impure --command nu"]
    }
    ```
- **Environment Variable Verification**: Check `YAZELIX_DEFAULT_SHELL` and other environment variables to confirm proper setup
- **Process Inspection**: Use `ps aux | grep` to verify if expected processes (like Zellij) are actually running

## Nushell Configuration Rules
- **Scoping Issues**: Avoid `export-env` blocks for aliases - they create separate scopes
  - Export aliases at top level: `export alias z = cd`
  - Move environment variable setup outside export-env when possible
- **Conditional Logic**: Structure conditionals to work with Nushell's scoping:
  - Always export basic fallback aliases first
  - Override with advanced functionality when tools are available
  - Use `if (which tool | is-not-empty)` for tool availability checks
- **Error Handling**: Wrap external commands with safety checks:
  - `try { command } catch { fallback }`
  - Check tool availability before using: `if (which tool | is-not-empty)`
- **Configuration Loading**: Test configuration sourcing manually when debugging:
  - `source ~/.config/yazelix/nushell/config/config.nu`
  - `source ~/.config/yazelix/nushell/initializers/specific_init.nu`

## Environment Compatibility Rules
- **Multi-Environment Support**: Code should work in:
  - Full Yazelix environment (Nix shell with all tools)
  - Partial environments (system shells with limited tools)
  - External environments (VSCode/Cursor integrated terminals)
- **Safety-First Initialization**: Generate initializer scripts that never break:
  - Check tool availability before setup
  - Wrap all external commands in try-catch or availability checks
  - Provide meaningful fallbacks for all functionality

## Content Style Rules
- Use direct, no-nonsense, actionable tone in all responses
- Use consistent naming conventions
- Follow yazelix naming patterns: lowercase with hyphens for files, camelCase for variables
- Reference the three main tools: Yazi (file manager), Zellij (terminal multiplexer), Helix (editor)

## Project-Specific Rules
- Always consider the integration between Yazi, Zellij, and Helix when making changes
- When modifying shell scripts, test both Nushell and Bash compatibility
- When adding new dependencies to flake.nix, categorize them properly (essential, optional, or yazi extensions)
- Follow the existing structure: bash/, nushell/, yazi/, zellij/, terminal_configs/
- When updating documentation, ensure it reflects both Nix-based and Cargo-based installation methods

## File Organization Rules
- Maintain the existing folder structure and naming conventions
- Bash scripts go in bash/
- Nushell configs go in nushell/
- Yazi configs go in yazi/
- Zellij configs go in zellij/
- Terminal emulator configs go in terminal_configs/
- Documentation goes in docs/
- Keep related content organized in appropriate folders 

## TODO List
- [x] Add auto-trimming to the logs generated on shellhooks (or stop generating them) - COMPLETED: Added auto-trim to keep only 10 most recent shellhook logs
- [x] Add a copy/generate script that copies yazelix_default.nix to yazelix.nix (both in root) - yazelix.nix will be git ignored for user customization
- [ ] Create option of having a folder that is gitignored containing user-specific configs that we can concatenate to yazelix configs when available 
